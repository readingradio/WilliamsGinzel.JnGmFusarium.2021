r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ as.character(r.block) + r.gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("r.state"))
r.toplot
r.ordi.summary.data <- cbind(root.nmds$points[,1:3], as.character(r.state), r.block, r.gm) %>% as.data.frame#
	r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ r.block + r.gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("r.state"))
r.ordi.summary.data
r.ordi.summary.data <- cbind(root.nmds$points[,1:3], state = as.character(r.state), block = as.character(r.block), gm = as.character(r.gm)) %>% as.data.frame
r.ordi.summary.data
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("state"))
r.toplot
with(r.toplot, plot(MDS1.mean, MDS2.mean, color = state, pch = gm)); legend()
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = as.factor(state), pch = as.factor(gm)))
as.factor(gm)
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = as.numeric(as.factor(state)), pch = as.numeric(as.factor(gm))))
r.ordi.summary.data <- cbind(root.nmds$points[,1:3], state = as.character(r.state), block = as.character(r.block), gm = as.character(r.gm), gm.symbol= r.grm, state.symbol= r.state) %>% as.data.frame
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","gm.state"))
r.ordi.summary.data <- cbind(root.nmds$points[,1:3], state = as.character(r.state), block = as.character(r.block), gm = as.character(r.gm), gm.symbol= r.gm, state.symbol= r.state) %>% as.data.frame#
	r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","gm.state"))
r.ordi.summary.data <- cbind(root.nmds$points[,1:3], state = as.character(r.state), block = as.character(r.block), gm = as.character(r.gm), gm.symbol= r.gm, state.col= r.state) %>% as.data.frame#
	r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","state.col"))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol)
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol))
r.toplot
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol))
r.ordi.summary.data <- cbind(root.nmds$points[,1:3], state = as.character(r.state), block = as.character(r.block), gm = as.character(r.gm), gm.symbol= as.numeric(r.gm), state.col= as.numeric(r.state)) %>% as.data.frame
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","state.col"))
r.toplot
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch=gm.symbol))
as.numeric(r.gm)
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch=gm.symbol))
gm.symbol
r.toplot
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = c(1,1,1,2,1,2,1,2)))
r.toplot
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = as.factor(state)))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = as.factor(gm)))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = as.numeric(as.factor(gm))))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = as.numeric(as.factor(gm.symbol))))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = as.numeric(gm.symbol)))
r.ordi.summary.data <- cbind(root.nmds$points[,1:3], state = as.character(r.state), block = as.character(r.block), gm = as.character(r.gm)) %>% as.data.frame#
	r.ordi.summary.data$state.col <- as.numeric(r.state)#
	r.ordi.summary.data$gm.symbol <- as.numeric(r.gm)#
	r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x), function(x) mean(x)-sd(x)), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","state.col"))#
	with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))
with(r.toplot, arrows(x0 = MDS1.minus, x1 = MDS1.plus, y0 = MDS2.minus, y1 = MDS2.plus, angle=90))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))#
	with(r.toplot, arrows(x0 = MDS1, y0 = MDS2.minus, y1 = MDS2.plus, angle=90))
with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, angle=90, col = stat.col))
with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, angle=90, col = state.col))
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+sd(x)/sqrt(length(x)), function(x) mean(x)-sd(x))/sqrt(length(x)), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","state.col"))
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) (mean(x)+sd(x)/sqrt(length(x))), function(x) (mean(x)-sd(x))/sqrt(length(x))),
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) {mean(x)+ sd(x)/ sqrt(length(x)) }, function(x) { mean(x)-sd(x))/sqrt(length(x))}), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","state.col"))
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) {mean(x)+ sd(x)/ sqrt(length(x)) }, function(x) { mean(x)-sd(x))/sqrt(length(x))}), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","state.col"))
r.toplot <- summaryBy(MDS1 + MDS2 + MDS3 ~ block + gm, data = r.ordi.summary.data, FUN = c(mean, function(x) mean(x)+ sd(x)/ sqrt(length(x)), function(x) mean(x)-sd(x)/sqrt(length(x))), fun.names=c("mean","plus","minus"), id=c("state","gm.symbol","state.col"))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))#
	with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, angle=90, col = state.col))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = state.col, pch = gm.symbol, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))#
	with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, angle=90, col = state.col, length = 0.1))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = gm.symbol, pch = state.col, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))
with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, angle=90, col = gm.symbol, length = 0.1))#
	with(r.toplot, arrows(x0 = MDS1.minus, x1 = MDS2.plus, y0 = MDS2.mean, angle=90, col = gm.symbol, length = 0.1))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = gm.symbol, pch = state.col, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))#
	with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, angle=90, col = gm.symbol, length = 0.1))#
	with(r.toplot, arrows(x0 = MDS1.minus, x1 = MDS1.plus, y0 = MDS2.mean, angle=90, col = gm.symbol, length = 0.1))
?arrows
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = gm.symbol, pch = state.col, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))#
	with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, .1, 90, 3, col = gm.symbol))#
	with(r.toplot, arrows(x0 = MDS1.minus, x1 = MDS1.plus, y0 = MDS2.mean, .1, 90, 3, col = gm.symbol))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = gm.symbol, pch = state.col, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))#
	with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, length=.1, angle=90, code=3, col = gm.symbol))#
	with(r.toplot, arrows(x0 = MDS1.minus, x1 = MDS1.plus, y0 = MDS2.mean, length=.1, angle=90, code=3, col = gm.symbol))
root.pcoa <- pcoa(d.all)
str(d.all)
str(root.pcoa)
root.pcoa$vectors
with(root.pcoa, plot(vectors[,21], vectors[,2], col=as.numeric(as.vector((r.state))))
with(root.pcoa, plot(vectors[,21], vectors[,2], col=as.numeric(as.vector((r.state)))
with(root.pcoa, plot(vectors[,21], vectors[,2], col=as.numeric(as.vector(r.state))))
vectors[,2]
r.state
with(root.pcoa, plot(vectors[,21], vectors[,2], col=r.state))
with(root.pcoa, plot(vectors[,1], vectors[,2], col=r.state))
with(root.pcoa, plot(vectors[,1], vectors[,2], col=r.gm))
with(root.pcoa, plot(vectors[,1], vectors[,2], col=r.state))
with(root.pcoa, plot(vectors[,2], vectors[,3], col=r.state))
with(root.pcoa, plot(vectors[,1], vectors[,2], col=r.block))
with(root.pcoa, plot(vectors[,2], vectors[,3], col=r.block))
with(root.pcoa, plot(vectors[,1], vectors[,2], col=r.block))
with(root.pcoa, plot(vectors[,1], vectors[,2], col=r.gm, pch=r.block))
with(root.pcoa, plot(vectors[,1], vectors[,2], col=r.gm, pch=as.numeric(r.block)))
with(r.toplot, plot(MDS1.mean, MDS3.mean, col = gm.symbol, pch = state.col, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS3.minus),max(MDS3.plus))))#
	with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS3.minus, y1 = MDS3.plus, length=.1, angle=90, code=3, col = gm.symbol))#
	with(r.toplot, arrows(x0 = MDS1.minus, x1 = MDS1.plus, y0 = MDS3.mean, length=.1, angle=90, code=3, col = gm.symbol))
with(r.toplot, plot(MDS1.mean, MDS2.mean, col = gm.symbol, pch = state.col, xlim=c(min(MDS1.minus),max(MDS1.plus)), ylim=c(min(MDS2.minus),max(MDS2.plus))))#
	with(r.toplot, arrows(x0 = MDS1.mean, y0 = MDS2.minus, y1 = MDS2.plus, length=.1, angle=90, code=3, col = gm.symbol))#
	with(r.toplot, arrows(x0 = MDS1.minus, x1 = MDS1.plus, y0 = MDS2.mean, length=.1, angle=90, code=3, col = gm.symbol))
t(root_otu_table)
roots
names(roots)
roots.t <- t(root_otu_table)
rownames(roots.t)
otu_translation_table <- data.frame(otu=rownames(roots.t), otu=NA, Phylum=NA, Class=NA, Order=NA, Family=NA, Genus=NA, Taxon.assignment=NA)
otu_translation_table
(function(x) roots.t[x,c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")][1,])("Pezizo.OTU6")
(function(x) roots.t[x,c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])("Pezizo.OTU6")
(function(x) roots.t[x,])("Pezizo.OTU6")
roots
(function(x) roots[x,])("Pezizo.OTU6")
(function(x) roots[roots$otu==x,])("Pezizo.OTU6")
roots[roots$otu=="Pezizo.OTU6",c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]
dim(roots)
roots$otu
roots$otu<- as.factor(roots$otu)
roots[roots$otu=="Pezizo.OTU6",c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]
roots[which(roots$otu=="Pezizo.OTU6"),c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]
roots[which(roots$otu=="Pezizo.OTU1"),c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]
roots[which(roots$otu=="Pezizo.OTU2"),c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]
roots[which(roots$otu=="Pezizo.OTU11"),c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]
roots[which(roots$otu=="Pezizo.OTU11")[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]
apply(rownames(roots.t), margin=1, FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
apply(rownames(roots.t), margin=2, FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
lapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
tapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
mapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
?apply
rownames(roots.t)
tapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
?sapply
vapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
lapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
lapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
lapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
lapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% simplify2array
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
mapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
tapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
apply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
?apply
vapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
str(roots)
roots$Phylum <- as.character(roots$Phylum)
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
sapply(rownames(roots.t)%>%t, FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])%>%t
roots$otu <- as.character(roots$otu)#
roots$Phylum <- as.character(roots$Phylum)#
roots$Class <-  as.character(roots$Class)#
roots$Order <-  as.character(roots$Order)#
roots$Family <- as.character(roots$Family)#
roots$Genus <-  as.character(roots$Genus)
roots$Taxon.assignment <-  as.character(roots$Taxon.assignment)
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])%>%t
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])%>%t
otu_translation_table
library(dplyr)
roots.t$otu = rownames(roots.t)
roots.t
roots.t <- t(root_otu_table) %>% as.data.frame
roots.t
roots.t$otu = rownames(roots.t)
roots.joined <- left_join(otu_translation_table, roots.t, by = "otu")
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])%>%t%>%as.data.frame
roots.joined <- left_join(otu_translation_table, roots.t, by = "otu")
otu_translation_table
roots.t
roots.joined <- left_join(otu_translation_table, roots.t, by = "otu")
str(otu_translation_table)
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])%>%as.data.frame%>%t%>%as.data.frame
str(otu_translation_table)
roots.t <- t(root_otu_table) %>% as.data.frame
roots.t$otu = rownames(roots.t)
str(roots.t$otu)
str(roots.t)
t(root_otu_table)
roots.t <- t(as.matrix(root_otu_table)) %>% as.data.frame
roots.t$otu = rownames(roots.t)
str(roots.t)
colnames(roots.t)
names(roots.t)
root_otu_table
t(as.matrix(root_otu_table)) %>% as.data.frame
roots.t <- t(as.matrix(root_otu_table)) %>% as.data.frame
names(roots.t)
str(roots.t)
library(data.table)
roots.t <- transpose(root_otu_table)
?transpose
roots.t <- data.table:transpose(root_otu_table)
roots.t <- data.table::transpose(root_otu_table)
str(root_otu_table)
as.data.frame(root_otu_table)
roots.t <- transpose(as.data.frame(root_otu_table))
str(root_otu_table)
str(roots.t)
rownames(names(root_otu_table))
colnames<- rownames(root_otu_table)
rownames<- names(root_otu_table)
str(roots.t)
roots.t$otu = rownames(roots.t)
str(roots.t)
roots.t
names(root_otu_table)
rownames(roots.t)<- names(root_otu_table)
colnames(roots.t)<- rownames(root_otu_table)
roots.t <- transpose(as.data.frame(root_otu_table))#
rownames(roots.t)<- names(root_otu_table)#
colnames(roots.t)<- rownames(root_otu_table)#
roots.t$otu = rownames(roots.t)#
str(roots.t)
roots.t
roots.t <- transpose(as.data.frame(root_otu_table)) %>% as.data.frame
roots.t <- transpose(as.data.frame(root_otu_table)) %>% as.data.frame#
rownames(roots.t)<- names(root_otu_table)#
colnames(roots.t)<- rownames(root_otu_table)#
roots.t$otu = rownames(roots.t)#
str(roots.t)#
roots.t
names(root_otu_table)
colnames(root_otu_table)
roots.t <- transpose(as.data.frame(root_otu_table)) %>% as.data.frame#
rownames(roots.t)<- colnames(root_otu_table)#
colnames(roots.t)<- rownames(root_otu_table)#
roots.t$otu = rownames(roots.t)#
str(roots.t)#
roots.t
str(roots.t)
class(roots.t)
class(roots.t$otu)
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
str(otu_translation_table )
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.matrix %>%as.data.frame
str(otu_translation_table)
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.matrix %>%data.frame
str(otu_translation_table)
otu_translation_table <- do.call(cbind(lapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])))
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.data.frame()
str(otu_translation_table)
otu_translation_table
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.data.frame() %>% transpose %>% as.data.frame#
str(otu_translation_table)
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.data.frame %>% transpose
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.data.frame
str(otu_translation_table)
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.matrix %>% transpose %>% as.data.frame
str(otu_translation_table)
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.matrix
otu_translation_table
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.matrix %>% transpose
otu_translation_table <-sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
apply(rownames(roots.t), 2, FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]) %>% as.data.frame %>% transpose
sapply(rownames(roots.t), FUN= function(x) roots[which(roots$otu==x)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
for (i in rownames(roots.t)) otu_translation_table <- rbind(otu_translation_table, roots[which(roots$otu==i)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")]))
rownames(roots.t)
otu_translation_table <-   NULL#
for (i in rownames(roots.t)) otu_translation_table <- rbind(otu_translation_table, roots[which(roots$otu==i)[1],c("otu","Phylum","Class","Order","Family","Genus","Taxon.assignment")])
str(otu_translation_table)
roots.joined <- left_join(otu_translation_table, roots.t, by = "otu")
roots.joined
roots.joined %>% group_by (Genus) %>% dplyr::summarize (count = n())
roots.joined %>% group_by (Genus) %>% dplyr::summarize (count = n()) %>% ungroup()
roots.joined %>% group_by (Genus) %>% dplyr::summarize (count = n()) %>% ungroup()
roots.joined %>% group_by (Genus)
roots.joined
?melt
?dplyr::melt
names(roots.joined)
?melt
library(tidyr)
?melt
library(dplyr)#
library(vegan)#
library(permute)#
library(car)#
library(MASS)#
library(tidyverse)#
library (ggplot2)#
library(RColorBrewer)#
library(ape)#
library(MuMIn)#
library(ggsignif)#
library(asbio)#
library(doBy)#
library(emmeans)#
library(multcomp)#
library(gridExtra)#
library(rcompanion)#
#
# set working directory#
#
setwd('/Users/will1809/OneDrive - purdue.edu/Repositories.GitHub/WilliamsGinzel.JnGmFusarium.2021')#
#
source("Code/OTU.functions.R")#
#
# read in clusters and assignments from mothur#
#
OTUS.mothur <- read.csv("Data/mothur.otus.ForestPlant.Nov20.2020.csv", header=F)#
names(OTUS.mothur) <- c('otu','Isolate')#
OTUS <- convert.otu.table_(OTUS.mothur)#
OTUS$Isolate <- OTUS$Isolate %>% gsub('(?<=Rh)_', '', ., perl=T)#
#
# read in experiment metadata#
#
design <- read.csv('Data/Isolate.metadata.ForestPlant.4.9.19.SC.csv')#
#
inoc.design <- read.csv('Data/forest plant smbiome treat design.csv') %>%#
	mutate(Soil=str_replace_all(string=Soil, pattern="Sterile", replacement="Control"))#
#
inoc.design$plant <- paste(inoc.design$Soil, inoc.design$Rep)#
names(inoc.design)[names(inoc.design)=="Treatment"] <- "Inoc"#
#
inoc.design<-inoc.design[-c(24,67, 103,107),]#
#
# the following code blocks manipulates the data to sort it as desired and rename codes#
#
pattern <- "(?<=^Rh)[0-9]{1,3}(?=([ab])|(_[12]))?"#
#
design$Parent.isolate <- regmatches(design$Isolate, regexpr(pattern, design$Isolate, perl=T))#
#
OTUS$Parent.isolate <- regmatches(OTUS$Isolate, regexpr(pattern, OTUS$Isolate, perl=T))#
#
fulld <- na.omit(plyr::join(OTUS, design[,3:6], type="right",by="Parent.isolate", match = "all"))#
dim(design)#
dim(fulld)#
#
fulld<-fulld[-10,]#
partd <- fulld %>%#
mutate(Treat=str_replace_all(string = Treat, pattern='S', 'Control')) %>%#
mutate(Treat=str_replace_all(string = Treat, pattern='P', 'Plantation')) %>%#
mutate(Treat=str_replace_all(string = Treat, pattern='F', 'Forest'))#
#
partd$Treat <- factor(partd$Treat, levels=c('Control','Plantation','Forest'))#
#
partd$plant <- paste(partd$Treat, partd$Rep)#
#
as.factor(design[,"Isolate"]) %>% setdiff(as.factor(partd$Isolate))#
#
# look at taxon summary by treatment#
#
sum(partd$Treat=="Forest")#
sum(partd$Treat=="Plantation")#
sum(partd$Treat=="Control")#
#
# rename taxonomy and sort it into things#
#
taxids <- read_tsv("Data/ForPlant.ITS.MesquiteAssembly.Final.mothur.unique.opti_mcc.0.05.cons.taxonomy") %>% dplyr::rename(otu=OTU) %>% dplyr::rename(taxonomy=Taxonomy) %>% #
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern="\\(\\d*\\)", replacement="")) %>%#
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern=";$", replacement="")) %>%#
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern="[kpocfgs]\\__", replacement="")) %>%#
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern="_unclassified", replacement="_sp")) %>%#
	separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus", "species"), sep=";")#
#
taxids$otu <- as.factor(taxids$otu)
head(taxids)
taxids %>% anti_join(., fulld) #
#
taxids %>% inner_join(., fulld) %>% write.csv('OTU.table.11.30.20.csv')
fulld
data.frame(isolate=c((taxids %>% inner_join(., fulld))$Isolate[grep('Fusarium', (taxids %>% inner_join(., fulld))$genus)],#
(taxids %>% inner_join(., fulld))$Isolate[grep('Neocosmospora', (taxids %>% inner_join(., fulld))$genus)],#
(taxids %>% inner_join(., fulld))$Isolate[grep('Cylindrocarpon', (taxids %>% inner_join(., fulld))$genus)],#
(taxids %>% inner_join(., fulld))$Isolate[grep('Nectriaceae_sp', (taxids %>% inner_join(., fulld))$genus)]))
library(dplyr)#
library(vegan)#
library(permute)#
library(car)#
library(MASS)#
library(tidyverse)#
library(ggplot2)#
library(RColorBrewer)#
library(ape)#
library(MuMIn)#
library(ggsignif)#
library(asbio)#
library(doBy)#
library(emmeans)#
library(multcomp)#
library(gridExtra)#
library(rcompanion)#
#
# set working directory#
#
setwd('/Users/will1809/OneDrive - purdue.edu/Repositories.GitHub/WilliamsGinzel.JnGmFusarium.2021')#
#
source("Code/OTU.functions.R")#
#
# read in clusters and assignments from mothur#
#
OTUS.mothur <- read.csv("Data/mothur.otus.ForestPlant.Nov20.2020.csv", header=F)#
names(OTUS.mothur) <- c('otu','Isolate')#
OTUS <- convert.otu.table_(OTUS.mothur)#
OTUS$Isolate <- OTUS$Isolate %>% gsub('(?<=Rh)_', '', ., perl=T)#
#
# read in experiment metadata#
#
design <- read.csv('Data/Isolate.metadata.ForestPlant.4.9.19.SC.csv')#
#
inoc.design <- read.csv('Data/forest plant smbiome treat design.csv') %>%#
	mutate(Soil=str_replace_all(string=Soil, pattern="Sterile", replacement="Control"))#
#
inoc.design$plant <- paste(inoc.design$Soil, inoc.design$Rep)#
names(inoc.design)[names(inoc.design)=="Treatment"] <- "Inoc"#
#
inoc.design<-inoc.design[-c(24,67, 103,107),]#
#
# the following code blocks manipulates the data to sort it as desired and rename codes#
#
pattern <- "(?<=^Rh)[0-9]{1,3}(?=([ab])|(_[12]))?"#
#
design$Parent.isolate <- regmatches(design$Isolate, regexpr(pattern, design$Isolate, perl=T))#
#
OTUS$Parent.isolate <- regmatches(OTUS$Isolate, regexpr(pattern, OTUS$Isolate, perl=T))#
#
fulld <- na.omit(plyr::join(OTUS, design[,3:6], type="right",by="Parent.isolate", match = "all"))#
dim(design)#
dim(fulld)#
#
fulld<-fulld[-10,]#
partd <- fulld %>%#
mutate(Treat=str_replace_all(string = Treat, pattern='S', 'Control')) %>%#
mutate(Treat=str_replace_all(string = Treat, pattern='P', 'Plantation')) %>%#
mutate(Treat=str_replace_all(string = Treat, pattern='F', 'Forest'))#
#
partd$Treat <- factor(partd$Treat, levels=c('Control','Plantation','Forest'))#
#
partd$plant <- paste(partd$Treat, partd$Rep)#
#
as.factor(design[,"Isolate"]) %>% setdiff(as.factor(partd$Isolate))#
#
# look at taxon summary by treatment#
#
sum(partd$Treat=="Forest")#
sum(partd$Treat=="Plantation")#
sum(partd$Treat=="Control")#
#
# rename taxonomy and sort it into things#
#
taxids <- read_tsv("Data/ForPlant.ITS.MesquiteAssembly.Final.mothur.unique.opti_mcc.0.05.cons.taxonomy") %>% dplyr::rename(otu=OTU) %>% dplyr::rename(taxonomy=Taxonomy) %>% #
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern="\\(\\d*\\)", replacement="")) %>%#
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern=";$", replacement="")) %>%#
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern="[kpocfgs]\\__", replacement="")) %>%#
	mutate(taxonomy=str_replace_all(string=taxonomy, pattern="_unclassified", replacement="_sp")) %>%#
	separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus", "species"), sep=";")#
#
taxids$otu <- as.factor(taxids$otu)#
#
# quality check the data#
#
taxids %>% anti_join(., fulld) #
#
taxids %>% inner_join(., fulld) %>% write.csv('OTU.table.11.30.20.csv')#
#
# look at the relative abundances of some of the more common Nectriaceae pathogen genera#
#
data.frame(isolate=c((taxids %>% inner_join(., fulld))$Isolate[grep('Fusarium', (taxids %>% inner_join(., fulld))$genus)],#
(taxids %>% inner_join(., fulld))$Isolate[grep('Neocosmospora', (taxids %>% inner_join(., fulld))$genus)],#
(taxids %>% inner_join(., fulld))$Isolate[grep('Cylindrocarpon', (taxids %>% inner_join(., fulld))$genus)],#
(taxids %>% inner_join(., fulld))$Isolate[grep('Nectriaceae_sp', (taxids %>% inner_join(., fulld))$genus)]))#
#
# look at rel abunds of Trichoderma spp.#
#
data.frame(isolate=(taxids %>% inner_join(., fulld))$Isolate[grep('Trichoderma', (taxids %>% inner_join(., fulld))$genus)])#
#
# select out taxa we want to work with (more than one instance, not a contaminant)#
# we assume Malasseziomycetes is a contaminant#
non.singletons <- taxids %>% inner_join(., partd) %>% filter (class != "Malasseziomycetes") %>% group_by (otu) %>% filter (n() > 1) %>% ungroup()
non.singletons
roots.joined %>% melt(id.vars=1:7, variable.name="SampleID")
test <- roots.joined %>% reshape2::melt(id.vars=1:7, variable.name="SampleID")
test[1:2]
dim(test)
?reshape2:melt
?reshape2::melt
test[1:2,]
design
